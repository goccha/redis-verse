name: Run Test

on:
  push:
    branches:
      - '**'
      - '!main'
    paths:
      - '**.go'
  pull_request:
    branches:
      - develop
      - main
    types:
      - opened
    paths:
      - '**.go'
  workflow_dispatch:

jobs:
  go-test:

    runs-on: ubuntu-latest
    timeout-minutes: 300

    steps:
      # tag名を変数化
      - name: Get the version (tag)
        id: get_version
        run: |
          echo ::set-output name=BRANCH::$(echo ${{ github.ref }} | sed -e "s#refs/heads/##g")
          echo ${{ github.ref }}
          echo $BRANCH

      - name: Set up Go 1.19.2
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.2

      - name: Check out code
        uses: actions/checkout@v3

      - name: Run checks
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest
          args: --timeout=5m --go=1.17

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd aws
          go mod tidy
          cd ..
          go mod tidy

      # Runs a single command using the runners shell
      - name: compose-run
        shell: bash
        run: |
          docker-compose up -d

      - name: Run tests
        run: |
          go test ./...

      - name: clean
        if: always()
        run: |
          docker-compose down
